package com.legalzoom.controller;

import com.legalzoom.dto.BankCardDTO;
import com.legalzoom.dto.ResultDTO;
import com.legalzoom.dto.SettingsDTO;
import com.legalzoom.entity.BankCard;
import com.legalzoom.enums.ErrorCode;
import com.legalzoom.exceptions.CardAlreadyExistsException;
import com.legalzoom.service.BankCardService;
import com.legalzoom.util.Constants;
import com.legalzoom.util.Settings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;

import static org.springframework.http.HttpStatus.OK;
import static org.springframework.web.bind.annotation.RequestMethod.POST;

/**
 * Created by dmitrigu on 5/25/2019.
 */

@RestController
public class BankCardController {

    Logger logger = LoggerFactory.getLogger(BankCardController.class);

    @Autowired
    private BankCardService bankCardService;

    @Autowired
    private Settings settings;

    @RequestMapping("/api/cards")
    public Collection<BankCardDTO> getCards(@RequestParam("offset") Integer offset) {

        Collection<BankCard> cards = bankCardService.getCards(offset, settings.getLimit());

        logger.info("Getting cards");

        Collection<BankCardDTO> result = new ArrayList<BankCardDTO>();
        for (BankCard card : cards) {
            BankCardDTO dto = new BankCardDTO();
            dto.setBankName(card.getBankName());
            dto.setCardNumber(card.getCardNumber());
            dto.setExpires(card.getExpiryDate());
            result.add(dto);
        }
        return result;
    }

    @ResponseStatus(OK)
    @RequestMapping(value = "/api/card", method = POST)
    @ResponseBody
    public ResultDTO addCard(@RequestBody HashMap data) {
        logger.info("Adding card");
        String bank = (String) data.get(Constants.bankName.name());
        String cardNumber = (String) data.get(Constants.cardNumber.name());
        String expires = (String) data.get(Constants.expires.name());
        ResultDTO result = new ResultDTO();
        try {
            BankCard card = bankCardService.parseBankCard(new String[]{bank, cardNumber, expires});

            if (card == null) {
                result.setStatus(ErrorCode.Error);
                result.setMessage("Error parsing bank card");
                return result;

            }
            bankCardService.add(card);
            result.setStatus(ErrorCode.Success);
        } catch (CardAlreadyExistsException e) {
            logger.error("Error adding CARD", e);
            result.setStatus(ErrorCode.Error);
            result.setMessage("Card already exists: " + cardNumber);

        } catch (Exception e) {
            logger.error("Error adding CARD", e);
            result.setStatus(ErrorCode.Error);
            result.setMessage(e.getMessage());
        }
        return result;
    }


    @ResponseStatus(OK)
    @RequestMapping(value = "/api/file", method = POST)
    @ResponseBody
    public ResultDTO addFile(@RequestParam("file") MultipartFile file) {

        logger.info("adding File " + file.getName());

        ResultDTO result = new ResultDTO();
        String name = file.getOriginalFilename();

        if (file.getSize() > settings.getMaxFileSize()) {
            result.setStatus(ErrorCode.Error);
            result.setMessage("File size must not exceed " + settings.getMaxFileSize() + " bytes");
            return result;
        }
        try {

            Collection<BankCard> cards = bankCardService.processCSV(file.getInputStream());

            if (CollectionUtils.isEmpty(cards)) {
                result.setStatus(ErrorCode.Error);
                result.setMessage("No cards were processed!");
            } else {
                result.setStatus(ErrorCode.Success);
                result.setMessage("Uploaded " + cards.size() + " cards");
            }

            return result;

        } catch (Exception e) {
            result.setStatus(ErrorCode.Error);
            result.setMessage("Unable to process CSV file ");
        }
        return result;

    }
    
    /*
        The cient side asks for application settings on page load
        It allows us not to hard-code setting data on client side and use only one source of settings.
    */
    @RequestMapping("/api/settings")
    @ResponseStatus(OK)
    @ResponseBody
    public SettingsDTO getSettings() {
        logger.info("getting settings");

        SettingsDTO result = new SettingsDTO();
        result.setBankNamePattern(settings.getBankNamePattern());
        result.setCardNumberPattern(settings.getCardNumberPattern());
        result.setExpiresPattern(settings.getExpiresPattern());
        result.setMaxFileSize(settings.getMaxFileSize());
        return result;
    }


}
